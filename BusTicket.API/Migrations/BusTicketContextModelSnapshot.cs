// <auto-generated />
using System;
using BusTicket.API.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BusTicket.API.Migrations
{
    [DbContext(typeof(BusTicketContext))]
    partial class BusTicketContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BusTicket.API.Core.Domain.Brand", b =>
                {
                    b.Property<int>("BrandID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("BrandID");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("BusTicket.API.Core.Domain.BusCategory", b =>
                {
                    b.Property<int>("BusCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("BusCategoryID");

                    b.ToTable("BusCategories");
                });

            modelBuilder.Entity("BusTicket.API.Core.Domain.BusDetail", b =>
                {
                    b.Property<int>("BusDetailID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandID");

                    b.Property<int>("BusCategoryID");

                    b.Property<int>("VendorID");

                    b.HasKey("BusDetailID");

                    b.HasIndex("BrandID");

                    b.HasIndex("BusCategoryID");

                    b.HasIndex("VendorID");

                    b.ToTable("BusDetails");
                });

            modelBuilder.Entity("BusTicket.API.Core.Domain.BusReservation", b =>
                {
                    b.Property<int>("BusReservationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Gender");

                    b.Property<string>("NoOfBus");

                    b.Property<string>("PassengerEmail");

                    b.Property<string>("PassengerName");

                    b.Property<string>("PassengerPhoneNo");

                    b.Property<DateTime>("ReservationDate");

                    b.Property<decimal>("TotalAmount");

                    b.HasKey("BusReservationID");

                    b.ToTable("BusReservations");
                });

            modelBuilder.Entity("BusTicket.API.Core.Domain.BusReservationCancel", b =>
                {
                    b.Property<int>("BusRsrvCnclID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("InvoiceID");

                    b.Property<string>("NoOfBus");

                    b.Property<DateTime>("ReturnDate");

                    b.HasKey("BusRsrvCnclID");

                    b.ToTable("BusReservationCancels");
                });

            modelBuilder.Entity("BusTicket.API.Core.Domain.Invoice", b =>
                {
                    b.Property<int>("InvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BoardPoint");

                    b.Property<DateTime>("BoardTime");

                    b.Property<string>("BusDetails");

                    b.Property<string>("DropPoint");

                    b.Property<DateTime>("DropTime");

                    b.Property<string>("Email");

                    b.Property<string>("Gender");

                    b.Property<string>("Name");

                    b.Property<string>("NoOfTicket");

                    b.Property<string>("PaymentMethod");

                    b.Property<string>("PhoneNo");

                    b.Property<DateTime>("ReservationDate");

                    b.Property<decimal>("TotalAmount");

                    b.Property<string>("TransactionType");

                    b.Property<decimal>("UnitPrice");

                    b.HasKey("InvoiceID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("BusTicket.API.Core.Domain.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MessageBody");

                    b.Property<DateTime>("MessageDeliveryDate");

                    b.Property<DateTime>("MessageDeliveryTime");

                    b.Property<int>("RecipientID");

                    b.Property<int>("UserID");

                    b.HasKey("MessageID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("BusTicket.API.Core.Domain.PaymentType", b =>
                {
                    b.Property<int>("PayTypID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<string>("PaymentMethod");

                    b.HasKey("PayTypID");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("BusTicket.API.Core.Domain.PromoOffer", b =>
                {
                    b.Property<int>("PromoID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PromoCode");

                    b.Property<string>("PromoDetails");

                    b.HasKey("PromoID");

                    b.ToTable("PromoOffers");
                });

            modelBuilder.Entity("BusTicket.API.Core.Domain.Route", b =>
                {
                    b.Property<int>("RouteID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BoardPoint");

                    b.Property<DateTime>("BoardTime");

                    b.Property<int>("BusDetailID");

                    b.Property<string>("DropPoint");

                    b.Property<DateTime>("DropTime");

                    b.Property<decimal>("Fare");

                    b.HasKey("RouteID");

                    b.HasIndex("BusDetailID");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("BusTicket.API.Core.Domain.SeatLayout", b =>
                {
                    b.Property<int>("SeatLayoutID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BusDetailID");

                    b.Property<int>("BusDetailsID");

                    b.Property<int>("LastSeat");

                    b.Property<string>("Layout");

                    b.Property<string>("LayoutType");

                    b.Property<int>("TotalSeat");

                    b.HasKey("SeatLayoutID");

                    b.HasIndex("BusDetailID");

                    b.ToTable("SeatLayout");
                });

            modelBuilder.Entity("BusTicket.API.Core.Domain.TicketReservation", b =>
                {
                    b.Property<int>("TicketResrvID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Gender");

                    b.Property<string>("NoOfTicket");

                    b.Property<string>("PassengerEmail");

                    b.Property<string>("PassengerName");

                    b.Property<string>("PassengerPhoneNo");

                    b.Property<DateTime>("ReservationDate");

                    b.Property<int>("RouteDetailsID");

                    b.Property<int?>("RouteID");

                    b.Property<string>("SeatNo");

                    b.Property<decimal>("UnitPrice");

                    b.HasKey("TicketResrvID");

                    b.HasIndex("RouteID");

                    b.ToTable("TicketReservations");
                });

            modelBuilder.Entity("BusTicket.API.Core.Domain.TicketReturn", b =>
                {
                    b.Property<int>("TicktReturnID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("InvoiceID");

                    b.Property<string>("NoOfTicket");

                    b.Property<DateTime>("ReturnDate");

                    b.HasKey("TicktReturnID");

                    b.ToTable("TicketReturns");
                });

            modelBuilder.Entity("BusTicket.API.Core.Domain.Vendor", b =>
                {
                    b.Property<int>("VendorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("VendorAddress");

                    b.Property<string>("VendorEmail");

                    b.Property<string>("VendorName");

                    b.Property<string>("VendorPhone");

                    b.HasKey("VendorID");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("BusTicket.API.Core.Domain.VendorPayment", b =>
                {
                    b.Property<int>("VendorPaymentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("PaymentDate");

                    b.Property<string>("PaymentDescription");

                    b.Property<string>("PaymentMethod");

                    b.Property<decimal>("TotalAmount");

                    b.Property<int>("VendorID");

                    b.HasKey("VendorPaymentID");

                    b.HasIndex("VendorID");

                    b.ToTable("VendorPayments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BusTicket.API.Core.Domain.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Designation");

                    b.Property<string>("Gender");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("JoiningDate");

                    b.Property<DateTime>("LastActive");

                    b.Property<DateTime>("LeavingDate");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("BusTicket.API.Core.Domain.BusDetail", b =>
                {
                    b.HasOne("BusTicket.API.Core.Domain.Brand", "Brand")
                        .WithMany("BusDetails")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BusTicket.API.Core.Domain.BusCategory", "BusCategory")
                        .WithMany("BusDetails")
                        .HasForeignKey("BusCategoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BusTicket.API.Core.Domain.Vendor", "Vendor")
                        .WithMany("BusDetails")
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BusTicket.API.Core.Domain.Route", b =>
                {
                    b.HasOne("BusTicket.API.Core.Domain.BusDetail", "BusDetails")
                        .WithMany("RouteDetails")
                        .HasForeignKey("BusDetailID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BusTicket.API.Core.Domain.SeatLayout", b =>
                {
                    b.HasOne("BusTicket.API.Core.Domain.BusDetail", "BusDetail")
                        .WithMany("SeatLayout")
                        .HasForeignKey("BusDetailID");
                });

            modelBuilder.Entity("BusTicket.API.Core.Domain.TicketReservation", b =>
                {
                    b.HasOne("BusTicket.API.Core.Domain.Route", "Route")
                        .WithMany("TicketReservations")
                        .HasForeignKey("RouteID");
                });

            modelBuilder.Entity("BusTicket.API.Core.Domain.VendorPayment", b =>
                {
                    b.HasOne("BusTicket.API.Core.Domain.Vendor", "Vendor")
                        .WithMany("VendorPayments")
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
